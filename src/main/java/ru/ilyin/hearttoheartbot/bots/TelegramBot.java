package ru.ilyin.hearttoheartbot.bots;

import jakarta.annotation.PostConstruct;
import lombok.extern.slf4j.Slf4j;
import org.springframework.ai.chat.client.ChatClient;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.User;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.ilyin.hearttoheartbot.conf.BotProperties;
import ru.ilyin.hearttoheartbot.handlers.MessageHandler;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@Slf4j
public class TelegramBot extends TelegramLongPollingBot {
    private final BotProperties botProperties;
    private final MessageHandler messageHandler;
    private final Map<Long, String> awaitingCommand;
    private final Map<String, ChatClient> promptToChat;


    public TelegramBot(BotProperties botProperties, MessageHandler messageHandler,
                       Map<Long, String> awaitingCommand, Map<String, ChatClient> promptToChat) {
        super(botProperties.getBotToken());
        this.botProperties = botProperties;
        this.messageHandler = messageHandler;
        this.awaitingCommand = awaitingCommand;
        this.promptToChat = promptToChat;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            User from = update.getMessage().getFrom();
            Long chatId = update.getMessage().getChatId();
            String message = update.getMessage().getText();
            // —è –æ–ø—Ä–µ–¥–µ–ª–∏–ª —á—Ç–æ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –≤–µ—Ä–Ω—É –¥–µ—Ñ–æ–ª—Ç
            if (message.contains("/")) {
                // —Ç–µ–ø–µ—Ä—å –º–Ω–µ –Ω–∞–¥–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫–∞—è —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞
                String response = messageHandler.handleMessage(chatId, message);
                if (!response.isEmpty()) {
                    sendMessage(chatId, response, from, message);
                }
            } else {
                String state = awaitingCommand.getOrDefault(chatId, null);
                if (state == null || state.isEmpty()) {
                    String response = messageHandler.handleMessage(chatId, "/help");
                    sendMessage(chatId, response, from, message);
                    return;
                }
                ChatClient client = promptToChat.get(state);
                String content = client.prompt()
                        .user(
                                u ->
                                        u.text(message)
                        )
                        .call()
                        .content();
                sendMessage(chatId, content, from, message);
            }
        }
    }

    @PostConstruct
    public void setBotCommands() {
        List<BotCommand> commands = new ArrayList<>();
        commands.add(new BotCommand("/start", "üèÅ –ù–∞—á–∞–ª–æ –≤–∞—à–µ–≥–æ –ø—É—Ç–∏ –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—é"));
        commands.add(new BotCommand("/talk", "üó®Ô∏è –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ —á—É–≤—Å—Ç–≤–∞–º–∏ ‚Äî —è –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Å–ª—É—à–∞—Ç—å"));
        commands.add(new BotCommand("/advice", "üí° –£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π"));
        commands.add(new BotCommand("/exercise", "üßò‚Äç‚ôÄÔ∏è –†–∞—Å—Å–ª–∞–±—å—Ç–µ—Å—å –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–∏–ª—ã —Å –ø–æ–º–æ—â—å—é –ø—Ä–∞–∫—Ç–∏–∫"));
        commands.add(new BotCommand("/selfcare", "üåø –ü—Ä–æ—Å—Ç—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ —Å–µ–±–µ"));
        commands.add(new BotCommand("/stop", "‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏–º —Ä–∞–∑–≥–æ–≤–æ—Ä, –∫–æ–≥–¥–∞ –≤—ã –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã"));

        try {
            execute(
                    new SetMyCommands(
                            commands,
                            new BotCommandScopeDefault(),
                            null
                    )
            );
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }



    @Override
    public String getBotUsername() {
        return botProperties.getBotUsername();
    }

    private void sendMessage(Long chatId, String text, User user, String message) {
        try {
            log.info("{} –æ—Ç–ø—Ä–∞–≤–∏–ª {} –∏ –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç {}", user, message, text);
            execute(new SendMessage(String.valueOf(chatId), text));
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

}
